#include <GL/glut.h>
#include <stdlib.h>
#include<math.h>

//timer variable
int time7=0;
int time8=0;
int time10=-1000;
int time12=-1000;
int timety=-1000;

///scene8
float brownn[]={0.7,0.3,0.15 };
float lampy[]={0.9,1,0.1 };
float brown[]={0.7,0.3,0};
float flo[]={0.9,0.7,0.7};
float green[]={0,0.4,0};
float slab[]={0.7,0.45,0.4};
float greypot[]={0.5,0.6,0.5 };
float pot[]={0.6,0.2,0.5};

///scene 7
float pink[]={1,0,1};
float red[]={1,0,0};
float blue[]={0,0,1};
float black[]={0,0,0};
float cyan[]={0,1,1};
float white[]={1,1,1};
float skyblue[]={0,.7,.955};
float sand[]={.92,.78,.68};
float papayawhip[]={1,.937,.835};
float purple[]={0.5,0,.5};
float bluishgreen[]={0,0.5,.5};
float peach[]={1,.937,.835};
float orange[]={1,.347,0};
float grey[]={.5,.4,.6};
float treegreen[]={0.2,.7,0};
float maroon[]={.62,0,0};
float green_12[]={00.9,1,0.0 };
float bluish[]={0,0,0.1};
float lightgreen[]={0,.5,0};
///scene 7
float tree_timer=0;
float cld1=-100;
float cld2=500;
float donut_7=50;
float jelly_from_left=-350;
float blu_from_right=1040;
float c3=0;
float c4=40;
float t1=-700;
float t2=-700;
float t3=-700;

///scene8
float tiny=280;
float big=200;
float donut_8=230;

///scene 10
float fruitsize=.8;
float angle=0;
float jelly=140;
float cd1=-100;
float cd2=500;
float fruit1x=125;
float fruit1y=140;
float fruit1z=0;

float donut_10=750;
float fruit2x=125;
float fruit2y=140;
float fruit2z=0;
float c_=40;

///scene12
float donut_12=52;
float jelly_12=-350;
float blu_12=1040;

///ty

float ty_timer=0;
float donut_ty=55;
float ty=-700;
float ty_pos=-600;

void timer_ty(int)
{

     ///ufo moving
    ty_pos+=4.5;


   ty_timer+=3.5;
    if(ty_timer>300)
    {
        ty=300;
    }
//DONUT

    donut_ty+=0.25;
    if(donut_ty>58)
    {
        donut_ty=53;
    }

    glutPostRedisplay();  //calls display(); again
    glutTimerFunc(1000/60,timer_ty,0);  //calls itself periodically


}
///scene 7
void timer7(int)
{
    tree_timer+=20;
    if(tree_timer>=100)
    {
        t1=100;
    }
    if(tree_timer>=200)
    {
        t2=250;
    }
    if(tree_timer>300)
    {
        t3=200;
    }

    jelly_from_left+=4;
   if(jelly_from_left>245)
    {
        jelly_from_left=245;
    }


    if(jelly_from_left>=245)
    {
            donut_7+=3;
                if(donut_7>60)
    {
                donut_7=20;
    }

    }
        blu_from_right-=4;
   if(blu_from_right<450)
    {
        blu_from_right=450;
    }

    if(blu_from_right<=450)
    {
            donut_7+=3;
                if(donut_7>60)
    {
                donut_7=20;
    }

    }

///   cloud moving
    cld1+=.6;
    if(cld1>200)
    {
        cld1=20;
    }


    cld2+=.6;
    if(cld2>950)
    {
        cld2=300;
    }
//crows
    c3+=.8;
    if(c3>180)
    {
        c3=-40;
    }
    c4+=.9;
    if(c4>180)
    {
        c4=5;
    }

    glutTimerFunc(1000/60,timer7,0);
    glutPostRedisplay();

}


///scene8
void timer8(int)
{
    //cloud moving
    tiny+=.6;
    if(tiny>282)
    {
        tiny=280;
    }

    big+=.6;
    if(big>202)
    {
        big=200;
    }

//DONUT
    donut_8+=1;
    if(donut_8>235)
    {
        donut_8=230;
    }

    glutPostRedisplay();  //calls display(); again
    glutTimerFunc(1000/60,timer8,0);  //calls itself periodically
}

///scene 10

void timer10(int)
{
    //cloud moving
    jelly+=1;
    if(jelly>240)
    {
        jelly=240;
    }

    cd1+=.6;
    if(cd1>200)
    {
        cd1=20;
    }

    cd2+=.6;
    if(cd2>950)
    {
        cd2=300;
    }

//DONUT
    donut_10+=-2;
    if(donut_10<540)
    {
        donut_10=540;
    }

    //crows
    c_+=.5;
    if(c_>180)
    {
        c_=5;
    }

    glutPostRedisplay();  //calls display(); again
    glutTimerFunc(1000/60,timer10,0);  //calls itself periodically
}

///scene 12

void timer12(int)
{
      donut_12+=2;
    if(donut_12>80)
    {
        donut_12=52;
    }


    glutPostRedisplay();
    glutTimerFunc(1000/60,timer12,0);
}

void setMaterialColor(float *color)
{
    glMaterialfv(GL_FRONT,GL_DIFFUSE,color);
    glMaterialfv(GL_FRONT,GL_SPECULAR,white);//white color
    float mat_shine[]={100}; //to provide a little bit of shininess to object
    glMaterialfv(GL_FRONT,GL_SHININESS,mat_shine);
}

void drawElipse(float radiusX,float radiusY)
{
    float deg2rad=3.142/180;
    int i;
    glBegin(GL_POLYGON);
    for(i=0;i<360;i++)
    {
        float rad=i*deg2rad;
        glVertex3f(cos(rad)*radiusX,sin(rad)*radiusY,0);
    }
    glEnd();
}

void handle(){
    glPushMatrix();
	glTranslated(130, 600,200);
	glScaled(.5, .5, .5);
	glutSolidSphere(15, 15, 15);
	glPopMatrix();

}
void handRightBlu_ty()
{
    //handright
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(238,donut_ty,-10);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();
}
void fingerRightBlu_ty(){
    //finger right-hand
    glPushMatrix();
        glTranslatef(247,donut_ty,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();

}
void handmoveBlue_ty()
{
    //handleft
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(donut_ty,245,0);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();
}
void fingermoveBlue_ty(){
    //fingers-hand-left
    glPushMatrix();
        glTranslatef(donut_ty,254,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();


}
void draw_UFO()
{
   glPushMatrix();
    glPushMatrix();
    setMaterialColor(bluishgreen);
    glTranslatef(210,500,0);
    glRotatef(90,0,1,0);
    glScalef(1,2,1);
    glutSolidSphere(35,200,200);
    glPopMatrix();

    glPushMatrix();
    setMaterialColor(purple);
    glTranslatef(210,450,0);
    glScalef(1,.5,1);
    glutSolidSphere(55,200,200);
    glPopMatrix();


    glPushMatrix();
    //glTranslatef(500,500,0);
    setMaterialColor(peach);
    glBegin(GL_POLYGON);
    glVertex3f(175,450,0);
    glVertex3f(150,320,0);
    glVertex3f(272,320,0);
    glVertex3f(247,450,0);
    glEnd();
    glPopMatrix();

    glPopMatrix();

}
void closet()
{
    setMaterialColor(pink);

	glPushMatrix();

		glPushMatrix();
    setMaterialColor(brownn);
	glTranslated(128, 576,-10);
	glScalef(2,2,2);
	glutSolidCube(85);
	glPopMatrix();

    setMaterialColor(pink);

    handle();
   //handle2
    glPushMatrix();
	glTranslated(128, 420,150);
	glScaled(.5, .5, .5);
	glutSolidSphere(15, 15, 15);
	glPopMatrix();

	    glPushMatrix();
	glTranslated(-4, -350,150);
	handle();
	glPopMatrix();


		glPushMatrix();
    setMaterialColor(blue);
	glTranslated(128, 580,150);
	glScalef(1.5,1.5,1.5);
	glutSolidCube(60);
	glPopMatrix();

			glPushMatrix();
    setMaterialColor(blue);
	glTranslated(128, 400,100);
	glScalef(1.5,1.5,1.5);
	glutSolidCube(60);
	glPopMatrix();


			glPushMatrix();
    setMaterialColor(blue);
	glTranslated(130, 230,150);
	glScalef(1.5,1.5,1.5);
	glutSolidCube(60);
	glPopMatrix();


	glPushMatrix();
    setMaterialColor(brownn);
	glTranslated(128, 400,-10);
	glScalef(2,2,2);
	glutSolidCube(85);
	glPopMatrix();

						glPushMatrix();
    setMaterialColor(purple);
	glTranslated(128, 480,100);
	glScalef(1.5,0.5,1.5);
	glutSolidCube(120);
	glPopMatrix();

	glPushMatrix();
    setMaterialColor(brownn);
	glTranslated(128, 225,-10);
	glScaled(2, 2,2);
	glutSolidCube(85);
	glPopMatrix();

							glPushMatrix();
    setMaterialColor(purple);
	glTranslated(128, 310,100);
	glScalef(1.5,0.5,1.5);
	glutSolidCube(120);
	glPopMatrix();

					glPushMatrix();
    setMaterialColor(purple);
	glTranslated(128, 125,100);
	glScalef(1.5,0.5,1.5);
	glutSolidCube(120);
	glPopMatrix();

					glPushMatrix();
    setMaterialColor(purple);
	glTranslated(128, 660,100);
	glScalef(1.5,0.5,1.5);
	glutSolidCube(120);
	glPopMatrix();



glPopMatrix();
}
void handmoveBlue_8()
{
    //handleft
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(60,donut_8,0);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();
}
void fingermoveBlue_8(){
    //fingers-hand-left
    glPushMatrix();
        glTranslatef(50,donut_8,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();


}
void donut_left_hand_8()
{
    //handleft
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(60,230,0);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();

    //fingers-hand-left
    glPushMatrix();
        glTranslatef(50,296,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();


}
void handRightBlu_8()
{
    //handright
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(238,donut_8,-10);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();
}
void fingerRightBlu_8(){
    //finger right-hand
    glPushMatrix();
        glTranslatef(247,donut_8,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();

}

void donut_right_hand_8()
{
    //handright
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(238,150,-10);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();

    //finger right-hand
    glPushMatrix();
        glTranslatef(247,93,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();

}
void drawWall()
{

    float grey1[]={.7,.7,.7};
    setMaterialColor(grey1);

    //right
    glPushMatrix();
    glTranslatef(955,460,50);
    glRotatef(-92.05,0.095,0,0.5);
    glScalef(1.9,0.002,.9);
    glutSolidCube(500);
    glPopMatrix();

    //front
    glPushMatrix();
    glTranslatef(500,510,-600);
    glRotatef(90,2,0,0);
    glScalef(2,01,1.5);
    glutSolidCube(500);
    glPopMatrix();

    //left
    glPushMatrix();
    glTranslatef(15,460,-200);
    glRotatef(270.05,0.095,0,-.5);
    glScalef(1.8,0.001,1);
    glutSolidCube(500);
    glPopMatrix();

    //top
    glPushMatrix();
    glTranslatef(500,1100,-300);
    glRotatef(120,2,0,0);
    glScalef(2,0.005,1);
    glutSolidCube(500);
    glPopMatrix();


    glBegin(GL_POLYGON);
    glTranslatef(555,50,250);
    setMaterialColor(flo);

    glVertex3f(0,0,0);
    glVertex3f(-10,0,100);
    glVertex3f(40,140,100);
    glVertex3f(910,140,0);
    glVertex3f(1000,40,350);
    glVertex3f(2000,00,800);
    glEnd();
}


void drawDonut()
{
     //donut
    glPushMatrix();
        glTranslatef(150,200,0);
        glutSolidTorus(30,60,200,200);
    glPopMatrix();

    //legleft
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(120,100,0);
    glRotatef(90,0,1,0);
    glScalef(.05,1,.02);
    glutSolidCube(130);
    glPopMatrix();

    //legright
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(160,100,0);
    glRotatef(90,0,1,0);
    glScalef(.05,1,.02);
    glutSolidCube(130);
    glPopMatrix();

    //fingers-leg-left
    glPushMatrix();
        glTranslatef(120,40,-50);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();

    //finger right-leg
    glPushMatrix();
        glTranslatef(160,40,-50);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();


    //eyeleft
     glColor3f(0,0,0);
    glPushMatrix();
        glTranslatef(133,296,0);
        setMaterialColor(black);
        glutSolidSphere(15,100,100);
    glPopMatrix();

    //eyeRight
    glColor3f(1,1,1);
    glPushMatrix();
        glTranslatef(168,296,0);
        setMaterialColor(black);
        glutSolidSphere(15,100,100);
    glPopMatrix();

    //eyebrow
    glLineWidth(2);
    glBegin(GL_LINES);
        glVertex3f(125,315,0);
        glVertex3f(145,315,0);
    glEnd();

    glBegin(GL_LINES);
        glVertex3f(158,315,0);
        glVertex3f(178,315,0);
    glEnd();
}
void bed()
{
    //2nd side
    glColor3d(0.9,0.5,0.6);
    glPushMatrix();
    setMaterialColor(brownn);

    glTranslatef(0,0,150);
    glBegin(GL_POLYGON);
    glVertex3d(400,10,0);
    glVertex3d(400,230,0);
    glVertex3d(415,230,0);
    glVertex3d(415,10,0);
    glEnd();
    glPopMatrix();

    setMaterialColor(brownn);
    glLineWidth(8);
    glBegin(GL_LINE_STRIP);
    glVertex2i(15,230);
        setMaterialColor(slab);

    glVertex2i(50,255);
    glVertex2i(50,170);
    glEnd();

    setMaterialColor(brownn);
    glLineWidth(8);
    glBegin(GL_LINE_STRIP);
    glVertex2i(410,230);
    setMaterialColor(slab);
    glVertex2i(370,255);
    glVertex2i(370,170);
    glEnd();

        setMaterialColor(brownn);

    //1st side
    glBegin(GL_POLYGON);
    glVertex3d(10,10,0);
    glVertex3d(10,230,0);
    glVertex3d(25,230,0);
    glVertex3d(25,10,0);
    glEnd();

    setMaterialColor(brownn);
    //bed
    glBegin(GL_POLYGON);
    glVertex3d(20,60,0);
    glVertex3d(20,120,0);
    glVertex3d(400,120,0);
    glVertex3d(400,60,0);
    glEnd();

    setMaterialColor(slab);
    glColor3d(0.7,0.4,0);
    glBegin(GL_POLYGON);
    glVertex3d(20,120,0);
    glVertex3d(50,170,0);
    glVertex3d(370,170,0);
    glVertex3d(400,120,0);
    glEnd();
}
//BIG
void speakCloud()
{

    setMaterialColor(white);
    glPushMatrix();
        glTranslatef(130,20,0);
        drawElipse(60,60);
    glPopMatrix();

}

//tiny
void draw_clouds()
{

    glPushMatrix();
        glTranslatef(173,156,0);
        drawElipse(20,25);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(200,50,0);
        glScalef(0.5,0.5,0.5);
        drawElipse(10,15);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(196,100,0);
        glScalef(0.58,0.58,0.58);
        drawElipse(14,15);
    glPopMatrix();

        glPushMatrix();
        glTranslatef(196,25,0);
        glScalef(0.2,0.2,0.2);
        drawElipse(14,15);
    glPopMatrix();
}

void lamp(){
  //stem
    glPushMatrix();
    setMaterialColor(pot);
    glTranslatef(102,10,150);
    glRotatef(78,0,1,0);
    glScalef(2,2,2);
    glutSolidCube(25);
    glPopMatrix();

        //stem
    glPushMatrix();
    setMaterialColor(greypot);
    glTranslatef(105,50,-5);
    glRotatef(-20,0,1,0);
    glScalef(.75,5,.75);
    glutSolidCube(10);
    glPopMatrix();

    //plant
    glPushMatrix();
    setMaterialColor(lampy);
    glTranslatef(105,55,-5);
    glScalef(1.5,1.5,1.5);
     glRotatef(180,0,1,1);
    glutSolidCone(20,50,200,200);
    glPopMatrix();

}
///scene_7
void draw_crow()
{
    glBegin(GL_LINES);
        //glColor3f(0,0,0);
        setMaterialColor(black);
        glVertex3f(50,50,0);
        glVertex3f(70, 70,0);
        glEnd();
        glBegin(GL_LINES);
        glVertex3f(30, 70,0);
        glVertex3f(50, 50,0);
        glEnd();

}
void crow_pos()
{
    //crows
    glPushMatrix();
    glTranslatef(250,720,0);
    glScalef(0.3,0.3,0.3);
    draw_crow();
    glPopMatrix();
}
void crow_pos_10()
{
    //crows
    glPushMatrix();
    glTranslatef(400,900,0);
    glScalef(0.3,0.25,0.1);
    draw_crow();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(250,720,0);
    glScalef(0.3,0.3,0.3);
    draw_crow();
    glPopMatrix();
}
void draw_clouds_7()
{
    //clouds
    //glColor3f(1,1,1);
    setMaterialColor(white);
    glPushMatrix();
        glTranslatef(130,150,0);
        drawElipse(20,15);
    glPopMatrix();


    glPushMatrix();
        glTranslatef(150,165,0);
        drawElipse(20,20);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(150,145,0);
        drawElipse(15,15);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(173,150,0);
        drawElipse(20,25);
    glPopMatrix();


    glPushMatrix();
        glTranslatef(196,150,0);
        drawElipse(15,15);
    glPopMatrix();
}

void donut_left_hand()
{
    //handleft
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(60,230,0);
    glRotatef(15,0,1,1);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();

    //fingers-hand-left
    glPushMatrix();
        glTranslatef(50,296,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();


}

void donut_right_hand()
{
    //handright
    setMaterialColor(black);
    glPushMatrix();
    glTranslatef(240,235,-10);
    glRotatef(300,-6,-12,0);
    glScalef(.03,1,.02);
    glutSolidCube(130);
    glPopMatrix();

    //finger right-hand
    glPushMatrix();
        glTranslatef(254,295,0);
        setMaterialColor(black);
        glutSolidSphere(10,100,100);
    glPopMatrix();

}

void draw_tree()
{
//fruits
    setMaterialColor(red);
     glPushMatrix();
        glTranslatef(115,70,0);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);
    glPopMatrix();

     glPushMatrix();
        glTranslatef(105,85,0);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);
    glPopMatrix();

     glPushMatrix();
        glTranslatef(120,50,10);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);
    glPopMatrix();

     glPushMatrix();
        glTranslatef(99,55,15);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);

    glPopMatrix();

     glPushMatrix();
        glTranslatef(85,40,10);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);

    glPopMatrix();


    glPushMatrix();
        glTranslatef(105,65,10);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);

    glPopMatrix();

     glPushMatrix();
        glTranslatef(99,33,25);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);

    glPopMatrix();

     glPushMatrix();
        glTranslatef(125,33,25);
        glColor3f(1,0,0);
        glutSolidSphere(3,100,100);

    glPopMatrix();

    //stem
    glPushMatrix();
    setMaterialColor(brown);
    glTranslatef(105,25,-5);
    glRotatef(-20,0,1,0);
    glScalef(.75,5,.75);
    glutSolidCube(10);
    glPopMatrix();

    //tree-top
    glPushMatrix();
    setMaterialColor(green);
    glTranslatef(105,25,-5);
    glScalef(1.5,1.5,1.5);
     glRotatef(180,0,1,1);
    glutSolidCone(20,50,200,200);
    glPopMatrix();

}
void draw_grass()
{
    //glColor3f(0,.3,0);
    setMaterialColor(green);
    glBegin(GL_LINES);
    glVertex3f(200,200,0);
    glVertex3f(273,200,0);
    //glVertex3f(200,200,0)
    glEnd();

    glBegin(GL_TRIANGLES);
    glVertex3f(200,200,0);
    glVertex3f(211,280,0);
    glVertex3f(222,200,0);
    glEnd();

    glBegin(GL_TRIANGLES);
    glVertex3f(216,200,0);
    glVertex3f(226.5,350,0);
    glVertex3f(238,200,0);
    glEnd();

    glBegin(GL_TRIANGLES);
    glVertex3f(231,200,0);
    glVertex3f(238.5,300,0);
    glVertex3f(246,200,0);
    glEnd();

    glBegin(GL_TRIANGLES);
    glVertex3f(240,200,0);
    glVertex3f(247,260,0);
    glVertex3f(254,200,0);
    glEnd();

    glBegin(GL_TRIANGLES);
    glVertex3f(250,200,0);
    glVertex3f(256,250,0);
    glVertex3f(262,200,0);
    glEnd();

    glBegin(GL_TRIANGLES);
    glVertex3f(259,200,0);
    glVertex3f(267,280,0);
    glVertex3f(273,200,0);
    glEnd();
}

///scene_10
void draw_fruits()
{
     //fruits  layer1
    glPushMatrix();
    glTranslatef(55,55,0);
    setMaterialColor(red);

    glutSolidSphere(7,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(40,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(25,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(10,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-5,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-20,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-35,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-40,55,0);
    setMaterialColor(red);

    glutSolidSphere(10,100,100);
    glPopMatrix();



}
void draw_basket()
{
    setMaterialColor(maroon);
    glPushMatrix();
    glScalef(10,11,10);
    glRotatef(50,0,1,0);
    glutSolidCube(10);
    glPopMatrix();

    draw_fruits();

    glLineWidth(5);
    setMaterialColor(white);
    //front lines
    glPushMatrix();
    glTranslatef(-150,15,10);
    glBegin(GL_LINES);
        glVertex3f(120,10,60);
        glVertex3f(220,10,60);
    glEnd();
    glPopMatrix();


    glPushMatrix();
    glTranslatef(-150,-15,10);
    glBegin(GL_LINES);
        glVertex3f(120,10,60);
        glVertex3f(220,10,60);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-150,-45,10);
    glBegin(GL_LINES);
        glVertex3f(120,10,60);
        glVertex3f(220,10,60);
    glEnd();
    glPopMatrix();

    //left side lines
    glPushMatrix();
    glTranslatef(-240,15,10);
    glBegin(GL_LINES);
        glVertex3f(170,10,60);
        glVertex3f(215,10,60);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-240,-15,10);
    glBegin(GL_LINES);
        glVertex3f(170,10,60);
        glVertex3f(215,10,60);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-240,-45,10);
    glBegin(GL_LINES);
        glVertex3f(170,10,60);
        glVertex3f(215,10,60);
    glEnd();
    glPopMatrix();




    glPopMatrix();


}
void emptybasket(){
    setMaterialColor(maroon);
    glPushMatrix();
    glScalef(10,11,10);
    glRotatef(50,0,1,0);
    glutSolidCube(10);
    glPopMatrix();


    glLineWidth(5);
    setMaterialColor(white);
    //front lines
    glPushMatrix();
    glTranslatef(-150,15,10);
    glBegin(GL_LINES);
        glVertex3f(120,10,60);
        glVertex3f(220,10,60);
    glEnd();
    glPopMatrix();


    glPushMatrix();
    glTranslatef(-150,-15,10);
    glBegin(GL_LINES);
        glVertex3f(120,10,60);
        glVertex3f(220,10,60);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-150,-45,10);
    glBegin(GL_LINES);
        glVertex3f(120,10,60);
        glVertex3f(220,10,60);
    glEnd();
    glPopMatrix();

    //left side lines
    glPushMatrix();
    glTranslatef(-240,15,10);
    glBegin(GL_LINES);
        glVertex3f(170,10,60);
        glVertex3f(215,10,60);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-240,-15,10);
    glBegin(GL_LINES);
        glVertex3f(170,10,60);
        glVertex3f(215,10,60);
    glEnd();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-240,-45,10);
    glBegin(GL_LINES);
        glVertex3f(170,10,60);
        glVertex3f(215,10,60);
    glEnd();
    glPopMatrix();

    glPopMatrix();


}
void fruiting(){
            //separate fruit
        glPushMatrix();
        setMaterialColor(red);

        glTranslatef(160,150,100);
        glScalef(2.58,2.58,2.58);

        glutSolidSphere(5,100,100);
        glPopMatrix();
}
void fruitingB(){
            //separate fruit
        glPushMatrix();
        setMaterialColor(red);

        glTranslatef(-90,150,100);
        glScalef(2.9,2.9,2.9);

        glutSolidSphere(5,100,100);
        glPopMatrix();
}
void onlytree(){

    //stem
    glPushMatrix();
    setMaterialColor(brown);
    glTranslatef(105,25,-5);
    glRotatef(-20,0,1,0);
    glScalef(.75,5,.75);
    glutSolidCube(10);
    glPopMatrix();

    //tree-top
    glPushMatrix();
    setMaterialColor(green);
    glTranslatef(105,25,-5);
    glScalef(1.5,1.5,1.5);
     glRotatef(180,0,1,1);
    glutSolidCone(20,50,200,200);
    glPopMatrix();

}
void draw_money()
{
        setMaterialColor(black);
        glBegin(GL_LINES);
        glColor3f(0,0,0);
        glVertex3f(20,29,0);
        glVertex3f(20, 21,0);
        glEnd();
        glBegin(GL_LINES);
        glColor3f(0,0,0);
        glVertex3f(22, 29,0);
        glVertex3f(22, 21,0);
        glEnd();

        glBegin(GL_LINES);
        glColor3f(0,0,0);
        glVertex3f(16, 26,0);
        glVertex3f(25, 26,0);
        glEnd();

        glBegin(GL_LINES);
        glColor3f(0,0,0);
        glVertex3f(16, 24,0);
        glVertex3f(25, 24,0);
        glEnd();

    setMaterialColor(lightgreen);
    glBegin(GL_POLYGON);
         glVertex3f(8.0, 16.0, 0.0);
         glVertex3f(34.0, 16.0, 0.0);
         glVertex3f(34.0, 35.0, 0.0);
         glVertex3f(8.0, 35.0, 0.0);
        glEnd();

        float gg[]={.3,.7,.1};
        setMaterialColor(gg);
        glBegin(GL_POLYGON);
         glVertex3f(10.0, 18.0, 0.0);
         glVertex3f(32.0, 18.0, 0.0);
         glVertex3f(32.0, 32.0, 0.0);
         glVertex3f(10.0, 32.0, 0.0);
        glEnd();
}

void welcomeDisplay()
{
    glClearColor(0,0.85,0.92,1);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

    glColor3f(1,0,0);
    setMaterialColor(purple);
    //to move a cursor
    glRasterPos3f(350,800,100); //position of text
    char msg1[]="B  O  M  B     I  N     T  H  E     C  I  T  Y";
    for(int i=0;i<strlen(msg1);i++)
    {
    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg1[i]);
    }

    setMaterialColor(blue); //to move a cursor
    glRasterPos3f(550,550,100); //position of text
    char msg2[]="TEAM MEMBERS:";
    for(int i=0;i<strlen(msg2);i++)
    {
    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg2[i]);
    }

    setMaterialColor(red);   //to move a cursor
    glRasterPos3f(600,450,100); //position of text
    char msg3[]="1. K NISHA - 4S018CS059";
    for(int i=0;i<strlen(msg3);i++)
    {
    glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18,msg3[i]);
    }

    glRasterPos3f(600,400,100); //position of text
    char msg4[]="2. DHANUSHREE S - 4SO18CS033";
    for(int i=0;i<strlen(msg4);i++)
    {
    glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18,msg4[i]);
    }

    glRasterPos3f(600,350,100); //position of text
    char msg5[]="3. JENNIFER SERRAO - 4S018CS053";
    for(int i=0;i<strlen(msg5);i++)
    {
    glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18,msg5[i]);
    }

       //donut
    glPushMatrix();
    glTranslatef(250,150,0);
    glScalef(.7,.7,.7);
    setMaterialColor(blue);
    drawDonut();
    donut_left_hand();
    donut_right_hand();
    glPopMatrix();

    //tree
    glPushMatrix();
    glTranslatef(650,650,0);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();


    glFlush();
    glutSwapBuffers();
}
void display_7()
{
    glClearColor(1,.937,.835,1);
     glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

    //GRASS
        glPushMatrix();
    glTranslatef(-100,-90,0);
    glScalef(0.5,0.5,0.5);
    draw_grass();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(200,250,-10);
    glScalef(0.4,0.4,0.3);
    draw_grass();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(750,-100,0);
    glScalef(0.57,0.57,0.57);
    draw_grass();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(850,600,0);
    glScalef(0.4,0.4,0.4);
    draw_grass();
    glPopMatrix();


        glPushMatrix();
    glTranslatef(150,550,0);
    glScalef(0.4,0.4,0.4);
    draw_grass();
    glPopMatrix();

           glPushMatrix();
    glTranslatef(450,450,0);
    glScalef(0.4,0.4,0.4);
    draw_grass();
    glPopMatrix();

         //donut -Jelly
    glPushMatrix();
    setMaterialColor(pink);
    glTranslatef(jelly_from_left,donut_7,50);
    glScalef(1,1,1);
    drawDonut();
    glPushMatrix();
    donut_left_hand();
    glPopMatrix();
    glPushMatrix();
    donut_right_hand();
    glPopMatrix();
    glPopMatrix();

    //donut -Blue
    glPushMatrix();
    setMaterialColor(blue);
    glTranslatef(blu_from_right,donut_7,0);
    glScalef(1,1,1);
    drawDonut();
    glPushMatrix();
    donut_left_hand();
    glPopMatrix();
    glPushMatrix();
    donut_right_hand();
    glPopMatrix();
    glPopMatrix();
//sun
        setMaterialColor(orange);
    glPushMatrix();
        glTranslatef(420,900,0);
        drawElipse(20,25);
    glPopMatrix();

    //clouds
    glPushMatrix();
    glTranslatef(cld1,690,20);
    glScalef(1.5,1.5,1.5);
    draw_clouds_7();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(cld2,670,20);
    glScalef(1.5,1.5,1.5);
    draw_clouds_7();
    glPopMatrix();

    //TREES
    glPushMatrix();
    glTranslatef(-100,650,t1);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();


        glPushMatrix();
    glTranslatef(-25,550,t1);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-150,450,-t1);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

  //sec
    glPushMatrix();
    glTranslatef(100,510,t2);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();


     glPushMatrix();
    glTranslatef(200,480,t2);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(300,500,-t2);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();


//3rd
     glPushMatrix();
    glTranslatef(550,500,t3);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(650,480,t3);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(750,500,t3);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

    //crows
     glPushMatrix();
    glTranslatef(-50,c3,0);
    crow_pos();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(250,c3,0);
    crow_pos();
    glPopMatrix();

     glPushMatrix();
    glTranslatef(350,c4,0);
    crow_pos();
    glPopMatrix();

        //sky
    setMaterialColor(skyblue);
    glBegin(GL_POLYGON);
    glVertex3f(0,700,0);
    glVertex3f(1000,700,0);
    glVertex3f(1000,1000,0);
    glVertex3f(0,1000,0);
    glEnd();

    glutSwapBuffers();
    glFlush();
}
void display_8()
{
    glClearColor(1,1,1,1);
     glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

    glColor3f(1,0,0);
    setMaterialColor(purple);
    glRasterPos3f(328,520,100);
    char msg1[]="*Explains about his dream*";
    for(int i=0;i<strlen(msg1);i++)
    {
    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg1[i]);
    }

    //LAMP
    glPushMatrix();
        glTranslatef(700,150,0);
        lamp();
    glPopMatrix();
//CLOSET

    glPushMatrix();
         glRotatef(2,1,-1.5,-0.5);
    closet();
    glPopMatrix();


        //BIG
    glPushMatrix();
        glTranslatef(big,500,0);
        glScalef(1.7,1.7,1.7);
        speakCloud();
    glPopMatrix();

    //TINY
    glPushMatrix();
        glTranslatef(tiny,300,0);
        glScalef(1,1,1);
        draw_clouds();
    glPopMatrix();

       //blu
    glPushMatrix();
    setMaterialColor(blue);
    glTranslatef(350,68,180);
    glScalef(0.58,0.58,0.58);
    drawDonut();
    glPushMatrix();
    handmoveBlue_8();
    glPopMatrix();


//Lefthand
    glPushMatrix();
    glTranslatef(-1,55,180);
    fingermoveBlue_8();
    glPopMatrix();

//RIGHThand
    glPushMatrix();
    glTranslatef(-1,-65,0);
    handRightBlu_8();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(2,-139,180);
    fingerRightBlu_8();
    glPopMatrix();
    glPopMatrix();

    //jelly
    glPushMatrix();
    setMaterialColor(pink);
    glTranslatef(500,68,185);
    glScalef(0.58,0.58,0.58);
    drawDonut();
    glPushMatrix();
    donut_left_hand_8();
    glPopMatrix();


    glPushMatrix();
    donut_right_hand_8();
    glPopMatrix();
    glPopMatrix();

	drawWall();

	    setMaterialColor(brownn);

	glTranslatef(300,25,150);
    bed();


    glutSwapBuffers();
    glFlush();}

void display_10()
{
    glClearColor(1,.937,.835,1);
     glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

//donut -Jelly
    glPushMatrix();
    setMaterialColor(pink);
    glTranslatef(jelly,160,50);
    glScalef(0.55,0.55,0.55);
    drawDonut();
    glPushMatrix();
    donut_left_hand();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0,0,-10);

    donut_right_hand();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0,50,0);
    glRotatef(angle,1,1,0);
    glTranslatef(fruit1x,fruit1y,fruit1z);
     glScalef(fruitsize,fruitsize,fruitsize);
    fruiting();
    glPopMatrix();

    glPopMatrix();


    //donut -Blue
    glPushMatrix();
    setMaterialColor(blue);
    glTranslatef(donut_10,160,150);
    glScalef(0.55,0.55,0.55);
    drawDonut();
    glPushMatrix();
    donut_left_hand();
    glPopMatrix();
    glPushMatrix();
    donut_right_hand();
    glPopMatrix();


    glPushMatrix();
    glTranslatef(0,50,0);
    glRotatef(angle,1,1,0);
    glTranslatef(fruit2x,fruit2y,fruit2y);
     glScalef(fruitsize,fruitsize,fruitsize);
    fruitingB();

    glPopMatrix();


    glPopMatrix();

    //BASKET
    glPushMatrix();
    glTranslatef(400,200,-10);
    glScalef(0.5,0.5,0.5);
    draw_basket();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(550,200,-10);
    glScalef(0.5,0.5,0.5);
    draw_basket();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(600,450,-10);
    glScalef(0.5,0.5,0.5);
    draw_basket();
    glPopMatrix();

//GRASS
        glPushMatrix();
    glTranslatef(-100,-90,0);
    glScalef(0.5,0.5,0.5);
    draw_grass();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(20,500,-10);
    glScalef(0.4,0.4,0.3);
    draw_grass();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(750,-100,0);
    glScalef(0.57,0.57,0.57);
    draw_grass();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(850,600,0);
    glScalef(0.4,0.4,0.4);
    draw_grass();
    glPopMatrix();


        glPushMatrix();
    glTranslatef(350,550,0);
    glScalef(0.4,0.4,0.4);
    draw_grass();
    glPopMatrix();


   //clouds
    glPushMatrix();
    glTranslatef(cd1,690,20);
    glScalef(1.5,1.5,1.5);
    draw_clouds_7();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(cd2,670,20);
    glScalef(1.5,1.5,1.5);
    draw_clouds_7();
    glPopMatrix();

       //drooped fruits
    setMaterialColor(red);
    glPushMatrix();
    glTranslatef(600,230,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();

//rightback
    glPushMatrix();
    glTranslatef(650,450,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();

        glPushMatrix();
    glTranslatef(655,470,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();

    setMaterialColor(red);
    glPushMatrix();
    glTranslatef(450,200,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(445,215,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(500,215,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();

        glPushMatrix();
    glTranslatef(505,200,100);
    glutSolidSphere(5,100,100);
    glPopMatrix();


//EMPTY BASKETS

    glPushMatrix();
    glTranslatef(20,200,-100);
    glScalef(0.5,0.5,0.5);
    emptybasket();
    glPopMatrix();

   glPushMatrix();
    glTranslatef(60,270,-100);
    glScalef(0.5,0.5,0.5);
    emptybasket();
    glPopMatrix();

//TREES

    glPushMatrix();
    glTranslatef(-170,330,-100);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();


    glPushMatrix();
    glTranslatef(-150,550,100);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(100,550,-100);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();

//fruit pluckj
    glPushMatrix();
    glTranslatef(90,260,-10);
    glScalef(2,2,2);
    onlytree();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(330,455,-100);
    glScalef(2,2,2);
    onlytree();
    glPopMatrix();


  glPushMatrix();
    glTranslatef(160,400,-100);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();


    glPushMatrix();
    glTranslatef(550,525,-100);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(40,450,-100);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();

     glPushMatrix();
    glTranslatef(340,450,-200);
    glScalef(1.5,1.5,1.5);
    draw_tree();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(650,350,100);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(750,250,100);
    glScalef(2,2,2);
    draw_tree();
    glPopMatrix();

    //basket2TREE
            glPushMatrix();
    glTranslatef(250,250,-10);
    glScalef(2,2,2);
    onlytree();
    glPopMatrix();

                glPushMatrix();
    glTranslatef(550,250,100);
    glScalef(2,2,2);
    onlytree();
    glPopMatrix();


    //sun
        setMaterialColor(orange);
    glPushMatrix();
        glTranslatef(600,900,0);
        drawElipse(20,25);
    glPopMatrix();

    //crows
     glPushMatrix();
    glTranslatef(120,c_,0);
    crow_pos_10();
    glPopMatrix();

        //sky
    setMaterialColor(skyblue);
    glBegin(GL_POLYGON);
    glVertex3f(0,700,0);
    glVertex3f(1000,700,0);
    glVertex3f(1000,1000,0);
    glVertex3f(0,1000,0);
    glEnd();

    glutSwapBuffers();
    glFlush();
}
void display_12()
{
    glClearColor(0.6,0.4,0.7,0);
     glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

 glColor3f(1,0,0);
    setMaterialColor(green_12);
    //to move a cursor
    glRasterPos3f(100,800,100); //position of text
    char msg1[]="   As the saying goes 'WORK TODAY AND YOU CAN REAP THE BENEFITS TOMORROW', the couple worked ";
    for(int i=0;i<strlen(msg1);i++)
    {
             //to write text into screem
    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg1[i]);
    }
    setMaterialColor(green_12);

    glRasterPos3f(90,750,100);
    char msg2[]="   hard, sold their fruits and increased their business around the world. They thanked God for their wonderful life and ";
    for(int i=0;i<strlen(msg2);i++)
    {

    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg2[i]);
    }

    setMaterialColor(green_12);
    //to move a cursor
    glRasterPos3f(90,700,100);
    char msg3[]="   lived happily!";
    for(int i=0;i<strlen(msg3);i++)
    {

    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg3[i]);
    }

         //donut -Jelly
    glPushMatrix();
    setMaterialColor(pink);
    glTranslatef(250,donut_12,50);
    glScalef(1,1,1);
    drawDonut();
    glPushMatrix();
    donut_left_hand();
    glPopMatrix();
    glPushMatrix();
    donut_right_hand();
    glPopMatrix();
    glPopMatrix();

    //donut -Blue
    glPushMatrix();
    setMaterialColor(blue);
    glTranslatef(450,donut_12,0);
    glScalef(1,1,1);
    drawDonut();
    glPushMatrix();
    donut_left_hand();
    glPopMatrix();
    glPushMatrix();
    donut_right_hand();
    glPopMatrix();
    glPopMatrix();

    //money
    glPushMatrix();
    glTranslatef(90,380,200);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(95,380,200);
    glRotatef(30,1,1,1);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(20,800,200);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(20,800,200);
    glRotatef(30,1,1,1);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();


        glPushMatrix();
    glTranslatef(450,850,200);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(450,850,200);
    glRotatef(30,1,1,1);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(850,250,200);
    glRotatef(30,1,1,1);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

        glPushMatrix();
    glTranslatef(850,700,200);
    glRotatef(30,1,1,1);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();

            glPushMatrix();
    glTranslatef(-10,-10,200);
    glRotatef(30,1,1,1);
    glScalef(2,2,2);
    draw_money();
    glPopMatrix();
 glutSwapBuffers();
    glFlush();
}
void display_c()
{
    glClearColor(0.3,0.7,0.7,0 );
     glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

    glColor3f(0.3,0,0.4);
    setMaterialColor(bluish);
    //to move a cursor
    glRasterPos3f(190,700,100); //position of text
    char msg[]="Reforestation is the leading nature-based solutions for tackling the effects of climate change.";
    for(int i=0;i<strlen(msg);i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg[i]);

    glRasterPos3f(190,650,0);
    char msg2[]="A collective global effort is required in order to achieve a sustainable and balanced ecosystem. ";
    for(int i=0;i<strlen(msg2);i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg2[i]);

           glRasterPos3f(190,600,-0.9);
    char msg3[]="Let us make the world a better place, for the current generation and the generations to come.";
    for(int i=0;i<strlen(msg3);i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg3[i]);


    //trees
        glPushMatrix();
    setMaterialColor(green);
    glTranslatef(40,10,-5);
   glScalef(2.5,2.5,2.5);
  draw_tree();
    glPopMatrix();

        glPushMatrix();
    setMaterialColor(green);
    glTranslatef(355,10,-5);
   glScalef(2.5,2.5,2.5);
  draw_tree();
    glPopMatrix();


    glutSwapBuffers();
    glFlush();}
 ///THANKyou
void display()
{
    glClearColor(0.7,0.8,0.8,0);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(00,1000,00,1000,0,1000);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(00,00,400,0,0,0,0,01,0);
    glFrustum(0,1000,0,1000,-200,500);

    glColor3f(1,0,0);
    setMaterialColor(purple);
    //to move a cursor
    glRasterPos3f(425,650,ty); //position of text
    char msg1[]="T  H  A  N  K     Y  O  U !";
    for(int i=0;i<strlen(msg1);i++)
    {
             //to write text into screem
    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg1[i]);
    }
//blu
    glPushMatrix();
    setMaterialColor(blue);
    glTranslatef(200,68,180);
    glScalef(1,1,1);
    drawDonut();
    glPushMatrix();
    handmoveBlue_ty();
    glPopMatrix();

//Lefthand
    glPushMatrix();
    glTranslatef(-8,55,180);
    fingermoveBlue_ty();
    glPopMatrix();

//RIGHThand
    glPushMatrix();
    glTranslatef(-1,-20,0);
    donut_right_hand();
    glPopMatrix();


    glPopMatrix();

    //jelly

        glPushMatrix();
    glTranslatef(490,120,180);
    glScalef(1,1,1);
    fingermoveBlue_ty();
    glPopMatrix();

    glPushMatrix();
    setMaterialColor(pink);
    glTranslatef(500,68,185);
    glScalef(1,1,1);
    drawDonut();

     glPushMatrix();
    handmoveBlue_ty();
    glPopMatrix();
//Lefthand

    glPushMatrix();
    donut_right_hand();
    glPopMatrix();

       //ufo
     glPushMatrix();
    glTranslatef(ty_pos,350,0);
    draw_UFO();
    glPopMatrix();


    glPopMatrix();

    glutSwapBuffers();
    glFlush();}

void switchWindow(unsigned char key, int x, int y)
{
///scene7
    if(key=='1')
    {
        time7=0;
        glutDisplayFunc(display_7);

    }


///scene8

    if(key=='2')
    {
        glutDisplayFunc(display_8);

    }
///scene10
    if(key=='3')
    {
        glutDisplayFunc(display_10);

    }
///scene12
        if(key=='4') //scene 11
    {
        glutDisplayFunc(display_12);
    }
///scene_c
        if(key=='5') //scene 11
    {
        glutDisplayFunc(display_c);
    }
///scene_ty
        if(key=='6') //scene 11
    {
        glutDisplayFunc(display);
    }

///DROPFRUIT=scene10

    if(key=='e')
    {

        fruit1x=150;
        fruit1y=-35;

    }
    if(key=='f')
    {
        fruit2x=120;
        fruit2y=-25;
        fruit2z=-10;
    }
}
void initLight()
{
    float ambient_Light[]={0.5,0.5,0.5,0.5}; //last value is alpha
    float diffuse_light[]={1,1,1,0};
    float lightPos[]={800,800,300,1};
    //one light is used here
    glLightfv(GL_LIGHT0,GL_POSITION,lightPos);
    glLightfv(GL_LIGHT0,GL_AMBIENT,ambient_Light); //to give white light patch on ibject ie smooth surfsce
    glLightfv(GL_LIGHT0,GL_SPECULAR,white);
}

int main(int argc, char **argv)
{

glutInitWindowPosition(50, 50);

    glutInit(&argc, argv);
    glutInitWindowSize(1600,800);
    glutInitWindowPosition(0,0);
    glutInitDisplayMode(GLUT_DEPTH|GLUT_RGB|GLUT_DOUBLE);
    glutCreateWindow("BOMB IN THE CITY");
    glutDisplayFunc(welcomeDisplay);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_SHADE_MODEL);

    initLight();

    glutTimerFunc(5000,timer7,0);
    glutTimerFunc(3000,timer8,0);
    glutTimerFunc(15000,timer10,0);
    glutTimerFunc(0,timer12,0);
    glutTimerFunc(7000,timer_ty,0);

    glutKeyboardFunc(switchWindow);
    glutMainLoop();
    glDisable(GL_DEPTH_TEST);
    return 0;
}
